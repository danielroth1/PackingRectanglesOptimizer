package logic;

import java.util.LinkedList;

import logic.map.operation.Operation;

/**
 * A feasable soluation provides methods to perform different kind of search algorithms.
 * To reduce overhead it is recommended to use the methods undo and reset to generate
 * a new feasable solution. This prevents the necessity of cloning FeasableSolion Objects
 * anytime an other feasable solution is generated.
 * @author Daniel Roth
 */
public interface FeasableSolution {

	public double getCost();
	
	/**
	 * This Method generates a new feasable solution out of the Object itself.
	 * If the old feasable solution is required, is is possible to set the feasable
	 * solution generated by this method back by calling the undo method.
	 * @return boolean true if a new feasable solution was found else false
	 */
	public boolean updateToNextFeasableSolution();
	
	/**
	 * Sets the feasable solution back. If there wasn't a call of updateToNextFeasableSoluation,
	 * nothing will happen.
	 */
	public void undo();
	
	/**
	 * Is a better feasable soluation found, it is recommended to call this method. It frees
	 * memory that was used to distinguish between the already seen feasable solutions.
	 */
	public void reset();
	
	public FeasableSolution getCopy();
	
	public LinkedList<Operation> getTaboos();
	
	public Operation getLastOperation();
	
}
